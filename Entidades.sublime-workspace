{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tra",
				"transit"
			],
			[
				"trans",
				"transform"
			],
			[
				"funcio",
				"function"
			],
			[
				"tran",
				"transit"
			],
			[
				"fil",
				"fill-opacity"
			],
			[
				"fill",
				"fill-opacity"
			],
			[
				"text",
				"text-anchor"
			],
			[
				"enti",
				"entidades"
			],
			[
				"fi",
				"fill-opacity"
			],
			[
				"new",
				"newRoot"
			],
			[
				"entida",
				"entidad"
			],
			[
				"se",
				"select"
			],
			[
				"ar",
				"armarArbol"
			],
			[
				"des",
				"descendants"
			],
			[
				"zoo",
				"zoomListener"
			],
			[
				"zom",
				"zoomListener"
			],
			[
				"zo",
				"zoomTransform"
			],
			[
				"zoom",
				"zoomListener"
			],
			[
				"lo",
				"log"
			],
			[
				"s",
				"scale"
			],
			[
				"cen",
				"centrarEntidad"
			],
			[
				"cara",
				"cargaCompleta"
			],
			[
				"limi",
				"limite"
			],
			[
				"wi",
				"window"
			],
			[
				"nom",
				"nom_ent"
			],
			[
				"d",
				"depth"
			],
			[
				"rama",
				"ramas"
			],
			[
				"max",
				"maxLabelLength"
			],
			[
				"ac",
				"actualizarEntidad"
			],
			[
				"tree",
				"treeShow"
			],
			[
				"str_re",
				"str_replace"
			],
			[
				"pa",
				"parse"
			],
			[
				"car",
				"cargaCompleta"
			],
			[
				"tr",
				"trigger"
			],
			[
				"htm",
				"htmlentities"
			],
			[
				"sto",
				"stroke"
			],
			[
				"id",
				"id_ent"
			],
			[
				"p",
				"par_ent"
			],
			[
				"pro",
				"prototype"
			],
			[
				"dep",
				"dep_ent"
			],
			[
				"add",
				"addSearch"
			],
			[
				"rece",
				"receta"
			],
			[
				"adds",
				"addSearch"
			],
			[
				"ti",
				"tit_rec"
			],
			[
				"remo",
				"remove"
			],
			[
				"cat",
				"cat_rec"
			],
			[
				"get",
				"getCat"
			],
			[
				"ca",
				"catS"
			],
			[
				"inse",
				"insertarIngredientes"
			],
			[
				"exi",
				"exito"
			],
			[
				"json",
				"json_encode"
			],
			[
				"erro",
				"errores_de_la_verga"
			],
			[
				"tit",
				"titulo"
			],
			[
				"val",
				"valForm"
			],
			[
				"in",
				"Insertar"
			],
			[
				"recetas",
				"recetasRelevantes"
			],
			[
				"re",
				"recetasRelevantes"
			],
			[
				"ind",
				"indexOf"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"op",
				"opacity"
			],
			[
				"rg",
				"rgba()"
			],
			[
				"form",
				"formError"
			],
			[
				"fun",
				"function"
			],
			[
				"set",
				"setCookie"
			],
			[
				"exe",
				"execute"
			],
			[
				"pas",
				"pass_us"
			],
			[
				"pre",
				"prepare"
			],
			[
				"print",
				"print_r"
			],
			[
				"js",
				"json_encode"
			],
			[
				"z",
				"z-index"
			],
			[
				"fon",
				"font-size"
			],
			[
				"con",
				"conoceVideos"
			],
			[
				"flex-",
				"flex-wrap"
			],
			[
				"fle",
				"flex-direction"
			],
			[
				"par",
				"partes"
			],
			[
				"min",
				"min-width"
			],
			[
				"di",
				"display"
			],
			[
				"widt",
				"width"
			],
			[
				"e",
				"eq"
			],
			[
				"chil",
				"childs"
			],
			[
				"fl",
				"flecha"
			],
			[
				"ov",
				"overflow"
			],
			[
				"b",
				"background"
			],
			[
				"ali",
				"align-items"
			],
			[
				"w",
				"width"
			],
			[
				"l",
				"left"
			],
			[
				"a",
				"auto"
			],
			[
				"h",
				"height"
			],
			[
				"pos",
				"position"
			],
			[
				"ho",
				"hola3"
			],
			[
				"hola",
				"hola2"
			],
			[
				"nod",
				"nodaux"
			],
			[
				"nodo",
				"nodoaux"
			],
			[
				"inser",
				"InsertarOrdenadoHeuristica"
			],
			[
				"ce",
				"cerrada"
			],
			[
				"C",
				"Costo"
			],
			[
				"ins",
				"InsertarOrdenadoHeuristica"
			],
			[
				"cola",
				"Cola"
			],
			[
				"n",
				"N"
			],
			[
				"pr",
				"Profundidad"
			],
			[
				"li",
				"listview"
			],
			[
				"tar",
				"target"
			],
			[
				"data",
				"data-role"
			],
			[
				"pagecon",
				"pagecontainer"
			],
			[
				"che",
				"check"
			],
			[
				"marg",
				"margin-right"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"ui-bt",
				"ui-btn-inline"
			],
			[
				"bu",
				"busqueda"
			],
			[
				"bus",
				"busRecetas"
			],
			[
				"margin-bo",
				"margin-bottom"
			],
			[
				"mar",
				"margin"
			],
			[
				"ingre",
				"ingredientes"
			],
			[
				"Crear",
				"crearReceta"
			],
			[
				"wri",
				"writeAllMemory"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"tab",
				"tabla2"
			],
			[
				"prin",
				"print_r"
			],
			[
				"TAB",
				"tabla1"
			],
			[
				"th",
				"this"
			],
			[
				"PDO",
				"PDOException"
			],
			[
				"CONE",
				"conectar"
			],
			[
				"DB",
				"DBname"
			],
			[
				"cone",
				"Conexion"
			],
			[
				"pass",
				"Password"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 626,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "js/functions.js",
			"settings":
			{
				"buffer_size": 18190,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*Copyright (c) 2013-2016, Rob Schmuecker\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* The name Rob Schmuecker may not be used to endorse or promote products\n  derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/\n\n\n// Get JSON data\ntreeJSON = d3.json(\"flare.json\", function(error, treeData) {\n\n    // Calculate total nodes, max label length\n    var totalNodes = 0;\n    var maxLabelLength = 0;\n    // variables for drag/drop\n    var selectedNode = null;\n    var draggingNode = null;\n    // panning variables\n    var panSpeed = 200;\n    var panBoundary = 20; // Within 20px from edges will pan when dragging.\n    // Misc. variables\n    var i = 0;\n    var duration = 750;\n    var root;\n\n    // size of the diagram\n    var viewerWidth = $(document).width();\n    var viewerHeight = $(document).height();\n\n    var tree = d3.layout.tree()\n        .size([viewerHeight, viewerWidth]);\n\n    // define a d3 diagonal projection for use by the node paths later on.\n    var diagonal = d3.svg.diagonal()\n        .projection(function(d) {\n            return [d.y, d.x];\n        });\n\n    // A recursive helper function for performing some setup by walking through all nodes\n\n    function visit(parent, visitFn, childrenFn) {\n        if (!parent) return;\n\n        visitFn(parent);\n\n        var children = childrenFn(parent);\n        if (children) {\n            var count = children.length;\n            for (var i = 0; i < count; i++) {\n                visit(children[i], visitFn, childrenFn);\n            }\n        }\n    }\n\n    // Call visit function to establish maxLabelLength\n    visit(treeData, function(d) {\n        totalNodes++;\n        maxLabelLength = Math.max(d.name.length, maxLabelLength);\n\n    }, function(d) {\n        return d.children && d.children.length > 0 ? d.children : null;\n    });\n\n\n    // sort the tree according to the node names\n\n    function sortTree() {\n        tree.sort(function(a, b) {\n            return b.name.toLowerCase() < a.name.toLowerCase() ? 1 : -1;\n        });\n    }\n    // Sort the tree initially incase the JSON isn't in a sorted order.\n    sortTree();\n\n    // TODO: Pan function, can be better implemented.\n\n    function pan(domNode, direction) {\n        var speed = panSpeed;\n        if (panTimer) {\n            clearTimeout(panTimer);\n            translateCoords = d3.transform(svgGroup.attr(\"transform\"));\n            if (direction == 'left' || direction == 'right') {\n                translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;\n                translateY = translateCoords.translate[1];\n            } else if (direction == 'up' || direction == 'down') {\n                translateX = translateCoords.translate[0];\n                translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;\n            }\n            scaleX = translateCoords.scale[0];\n            scaleY = translateCoords.scale[1];\n            scale = zoomListener.scale();\n            svgGroup.transition().attr(\"transform\", \"translate(\" + translateX + \",\" + translateY + \")scale(\" + scale + \")\");\n            d3.select(domNode).select('g.node').attr(\"transform\", \"translate(\" + translateX + \",\" + translateY + \")\");\n            zoomListener.scale(zoomListener.scale());\n            zoomListener.translate([translateX, translateY]);\n            panTimer = setTimeout(function() {\n                pan(domNode, speed, direction);\n            }, 50);\n        }\n    }\n\n    // Define the zoom function for the zoomable tree\n\n    function zoom() {\n        svgGroup.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n    }\n\n\n    // define the zoomListener which calls the zoom function on the \"zoom\" event constrained within the scaleExtents\n    var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on(\"zoom\", zoom);\n\n    function initiateDrag(d, domNode) {\n        draggingNode = d;\n        d3.select(domNode).select('.ghostCircle').attr('pointer-events', 'none');\n        d3.selectAll('.ghostCircle').attr('class', 'ghostCircle show');\n        d3.select(domNode).attr('class', 'node activeDrag');\n\n        svgGroup.selectAll(\"g.node\").sort(function(a, b) { // select the parent and sort the path's\n            if (a.id != draggingNode.id) return 1; // a is not the hovered element, send \"a\" to the back\n            else return -1; // a is the hovered element, bring \"a\" to the front\n        });\n        // if nodes has children, remove the links and nodes\n        if (nodes.length > 1) {\n            // remove link paths\n            links = tree.links(nodes);\n            nodePaths = svgGroup.selectAll(\"path.link\")\n                .data(links, function(d) {\n                    return d.target.id;\n                }).remove();\n            // remove child nodes\n            nodesExit = svgGroup.selectAll(\"g.node\")\n                .data(nodes, function(d) {\n                    return d.id;\n                }).filter(function(d, i) {\n                    if (d.id == draggingNode.id) {\n                        return false;\n                    }\n                    return true;\n                }).remove();\n        }\n\n        // remove parent link\n        parentLink = tree.links(tree.nodes(draggingNode.parent));\n        svgGroup.selectAll('path.link').filter(function(d, i) {\n            if (d.target.id == draggingNode.id) {\n                return true;\n            }\n            return false;\n        }).remove();\n\n        dragStarted = null;\n    }\n\n    // define the baseSvg, attaching a class for styling and the zoomListener\n    var baseSvg = d3.select(\"#tree-container\").append(\"svg\")\n        .attr(\"width\", viewerWidth)\n        .attr(\"height\", viewerHeight)\n        .attr(\"class\", \"overlay\")\n        .call(zoomListener);\n\n\n    // Define the drag listeners for drag/drop behaviour of nodes.\n    dragListener = d3.behavior.drag()\n        .on(\"dragstart\", function(d) {\n            if (d == root) {\n                return;\n            }\n            dragStarted = true;\n            nodes = tree.nodes(d);\n            d3.event.sourceEvent.stopPropagation();\n            // it's important that we suppress the mouseover event on the node being dragged. Otherwise it will absorb the mouseover event and the underlying node will not detect it d3.select(this).attr('pointer-events', 'none');\n        })\n        .on(\"drag\", function(d) {\n            if (d == root) {\n                return;\n            }\n            if (dragStarted) {\n                domNode = this;\n                initiateDrag(d, domNode);\n            }\n\n            // get coords of mouseEvent relative to svg container to allow for panning\n            relCoords = d3.mouse($('svg').get(0));\n            if (relCoords[0] < panBoundary) {\n                panTimer = true;\n                pan(this, 'left');\n            } else if (relCoords[0] > ($('svg').width() - panBoundary)) {\n\n                panTimer = true;\n                pan(this, 'right');\n            } else if (relCoords[1] < panBoundary) {\n                panTimer = true;\n                pan(this, 'up');\n            } else if (relCoords[1] > ($('svg').height() - panBoundary)) {\n                panTimer = true;\n                pan(this, 'down');\n            } else {\n                try {\n                    clearTimeout(panTimer);\n                } catch (e) {\n\n                }\n            }\n\n            d.x0 += d3.event.dy;\n            d.y0 += d3.event.dx;\n            var node = d3.select(this);\n            node.attr(\"transform\", \"translate(\" + d.y0 + \",\" + d.x0 + \")\");\n            updateTempConnector();\n        }).on(\"dragend\", function(d) {\n            if (d == root) {\n                return;\n            }\n            domNode = this;\n            if (selectedNode) {\n                // now remove the element from the parent, and insert it into the new elements children\n                var index = draggingNode.parent.children.indexOf(draggingNode);\n                if (index > -1) {\n                    draggingNode.parent.children.splice(index, 1);\n                }\n                if (typeof selectedNode.children !== 'undefined' || typeof selectedNode._children !== 'undefined') {\n                    if (typeof selectedNode.children !== 'undefined') {\n                        selectedNode.children.push(draggingNode);\n                    } else {\n                        selectedNode._children.push(draggingNode);\n                    }\n                } else {\n                    selectedNode.children = [];\n                    selectedNode.children.push(draggingNode);\n                }\n                // Make sure that the node being added to is expanded so user can see added node is correctly moved\n                expand(selectedNode);\n                sortTree();\n                endDrag();\n            } else {\n                endDrag();\n            }\n        });\n\n    function endDrag() {\n        selectedNode = null;\n        d3.selectAll('.ghostCircle').attr('class', 'ghostCircle');\n        d3.select(domNode).attr('class', 'node');\n        // now restore the mouseover event or we won't be able to drag a 2nd time\n        d3.select(domNode).select('.ghostCircle').attr('pointer-events', '');\n        updateTempConnector();\n        if (draggingNode !== null) {\n            update(root);\n            centerNode(draggingNode);\n            draggingNode = null;\n        }\n    }\n\n    // Helper functions for collapsing and expanding nodes.\n\n    function collapse(d) {\n        if (d.children) {\n            d._children = d.children;\n            d._children.forEach(collapse);\n            d.children = null;\n        }\n    }\n\n    function expand(d) {\n        if (d._children) {\n            d.children = d._children;\n            d.children.forEach(expand);\n            d._children = null;\n        }\n    }\n\n    var overCircle = function(d) {\n        selectedNode = d;\n        updateTempConnector();\n    };\n    var outCircle = function(d) {\n        selectedNode = null;\n        updateTempConnector();\n    };\n\n    // Function to update the temporary connector indicating dragging affiliation\n    var updateTempConnector = function() {\n        var data = [];\n        if (draggingNode !== null && selectedNode !== null) {\n            // have to flip the source coordinates since we did this for the existing connectors on the original tree\n            data = [{\n                source: {\n                    x: selectedNode.y0,\n                    y: selectedNode.x0\n                },\n                target: {\n                    x: draggingNode.y0,\n                    y: draggingNode.x0\n                }\n            }];\n        }\n        var link = svgGroup.selectAll(\".templink\").data(data);\n\n        link.enter().append(\"path\")\n            .attr(\"class\", \"templink\")\n            .attr(\"d\", d3.svg.diagonal())\n            .attr('pointer-events', 'none');\n\n        link.attr(\"d\", d3.svg.diagonal());\n\n        link.exit().remove();\n    };\n\n    // Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.\n\n    function centerNode(source) {\n        scale = zoomListener.scale();\n        x = -source.y0;\n        y = -source.x0;\n        x = x * scale + viewerWidth / 2;\n        y = y * scale + viewerHeight / 2;\n        d3.select('g').transition()\n            .duration(duration)\n            .attr(\"transform\", \"translate(\" + x + \",\" + y + \")scale(\" + scale + \")\");\n        zoomListener.scale(scale);\n        zoomListener.translate([x, y]);\n    }\n\n    // Toggle children function\n\n    function toggleChildren(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else if (d._children) {\n            d.children = d._children;\n            d._children = null;\n        }\n        return d;\n    }\n\n    // Toggle children on click.\n\n    function click(d) {\n        if (d3.event.defaultPrevented) return; // click suppressed\n        d = toggleChildren(d);\n        update(d);\n        centerNode(d);\n    }\n\n    function update(source) {\n        // Compute the new height, function counts total children of root node and sets tree height accordingly.\n        // This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed\n        // This makes the layout more consistent.\n        var levelWidth = [1];\n        var childCount = function(level, n) {\n\n            if (n.children && n.children.length > 0) {\n                if (levelWidth.length <= level + 1) levelWidth.push(0);\n\n                levelWidth[level + 1] += n.children.length;\n                n.children.forEach(function(d) {\n                    childCount(level + 1, d);\n                });\n            }\n        };\n        childCount(0, root);\n        var newHeight = d3.max(levelWidth) * 25; // 25 pixels per line  \n        tree = tree.size([newHeight, viewerWidth]);\n\n        // Compute the new tree layout.\n        var nodes = tree.nodes(root).reverse(),\n            links = tree.links(nodes);\n\n        // Set widths between levels based on maxLabelLength.\n        nodes.forEach(function(d) {\n            d.y = (d.depth * (maxLabelLength * 10)); //maxLabelLength * 10px\n            // alternatively to keep a fixed scale one can set a fixed depth per level\n            // Normalize for fixed-depth by commenting out below line\n            // d.y = (d.depth * 500); //500px per level.\n        });\n\n        // Update the nodes…\n        node = svgGroup.selectAll(\"g.node\")\n            .data(nodes, function(d) {\n                return d.id || (d.id = ++i);\n            });\n\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"g\")\n            .call(dragListener)\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n            })\n            .on('click', click);\n\n        nodeEnter.append(\"circle\")\n            .attr('class', 'nodeCircle')\n            .attr(\"r\", 0)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter.append(\"text\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"dy\", \".35em\")\n            .attr('class', 'nodeText')\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            })\n            .style(\"fill-opacity\", 0);\n\n        // phantom node to give us mouseover in a radius around it\n        nodeEnter.append(\"circle\")\n            .attr('class', 'ghostCircle')\n            .attr(\"r\", 30)\n            .attr(\"opacity\", 0.2) // change this to zero to hide the target area\n        .style(\"fill\", \"red\")\n            .attr('pointer-events', 'mouseover')\n            .on(\"mouseover\", function(node) {\n                overCircle(node);\n            })\n            .on(\"mouseout\", function(node) {\n                outCircle(node);\n            });\n\n        // Update the text to reflect whether node has children or not.\n        node.select('text')\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            });\n\n        // Change the circle fill depending on whether it has children and is collapsed\n        node.select(\"circle.nodeCircle\")\n            .attr(\"r\", 4.5)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            });\n\n        // Fade the text in\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1);\n\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\n            })\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 0);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 0);\n\n        // Update the links…\n        var link = svgGroup.selectAll(\"path.link\")\n            .data(links, function(d) {\n                return d.target.id;\n            });\n\n        // Enter any new links at the parent's previous position.\n        link.enter().insert(\"path\", \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                var o = {\n                    x: source.x0,\n                    y: source.y0\n                };\n                return diagonal({\n                    source: o,\n                    target: o\n                });\n            });\n\n        // Transition links to their new position.\n        link.transition()\n            .duration(duration)\n            .attr(\"d\", diagonal);\n\n        // Transition exiting nodes to the parent's new position.\n        link.exit().transition()\n            .duration(duration)\n            .attr(\"d\", function(d) {\n                var o = {\n                    x: source.x,\n                    y: source.y\n                };\n                return diagonal({\n                    source: o,\n                    target: o\n                });\n            })\n            .remove();\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    // Append a group which holds all nodes and which the zoom Listener can act upon.\n    var svgGroup = baseSvg.append(\"g\");\n\n    // Define the root\n    root = treeData;\n    root.x0 = viewerHeight / 2;\n    root.y0 = 0;\n\n    // Layout the tree initially and center on the root node.\n    update(root);\n    centerNode(root);\n});",
			"settings":
			{
				"buffer_size": 19526,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "which in this case is to identify which items are needed for proper dental hygiene.,",
			"settings":
			{
				"buffer_size": 84,
				"line_ending": "Windows",
				"name": "which in this case is to identify which items are"
			}
		},
		{
			"contents": "/*Copyright (c) 2013-2016, Rob Schmuecker\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* The name Rob Schmuecker may not be used to endorse or promote products\n  derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/\n\n\n// Get JSON data\ntreeJSON = d3.json(\"flare.json\", function(error, treeData) {\n\n    // Calculate total nodes, max label length\n    var totalNodes = 0;\n    var maxLabelLength = 0;\n    // variables for drag/drop\n    var selectedNode = null;\n    var draggingNode = null;\n    // panning variables\n    var panSpeed = 200;\n    var panBoundary = 20; // Within 20px from edges will pan when dragging.\n    // Misc. variables\n    var i = 0;\n    var duration = 750;\n    var root;\n\n    // size of the diagram\n    var viewerWidth = $(document).width();\n    var viewerHeight = $(document).height();\n\n    var tree = d3.layout.tree()\n        .size([viewerHeight, viewerWidth]);\n\n    // define a d3 diagonal projection for use by the node paths later on.\n    var diagonal = d3.svg.diagonal()\n        .projection(function(d) {\n            return [d.y, d.x];\n        });\n\n    // A recursive helper function for performing some setup by walking through all nodes\n\n    function visit(parent, visitFn, childrenFn) {\n        if (!parent) return;\n\n        visitFn(parent);\n\n        var children = childrenFn(parent);\n        if (children) {\n            var count = children.length;\n            for (var i = 0; i < count; i++) {\n                visit(children[i], visitFn, childrenFn);\n            }\n        }\n    }\n\n    // Call visit function to establish maxLabelLength\n    visit(treeData, function(d) {\n        totalNodes++;\n        maxLabelLength = Math.max(d.name.length, maxLabelLength);\n\n    }, function(d) {\n        return d.children && d.children.length > 0 ? d.children : null;\n    });\n\n\n    // sort the tree according to the node names\n\n    function sortTree() {\n        tree.sort(function(a, b) {\n            return b.name.toLowerCase() < a.name.toLowerCase() ? 1 : -1;\n        });\n    }\n    // Sort the tree initially incase the JSON isn't in a sorted order.\n    sortTree();\n\n    // TODO: Pan function, can be better implemented.\n\n    function pan(domNode, direction) {\n        var speed = panSpeed;\n        if (panTimer) {\n            clearTimeout(panTimer);\n            translateCoords = d3.transform(svgGroup.attr(\"transform\"));\n            if (direction == 'left' || direction == 'right') {\n                translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;\n                translateY = translateCoords.translate[1];\n            } else if (direction == 'up' || direction == 'down') {\n                translateX = translateCoords.translate[0];\n                translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;\n            }\n            scaleX = translateCoords.scale[0];\n            scaleY = translateCoords.scale[1];\n            scale = zoomListener.scale();\n            svgGroup.transition().attr(\"transform\", \"translate(\" + translateX + \",\" + translateY + \")scale(\" + scale + \")\");\n            d3.select(domNode).select('g.node').attr(\"transform\", \"translate(\" + translateX + \",\" + translateY + \")\");\n            zoomListener.scale(zoomListener.scale());\n            zoomListener.translate([translateX, translateY]);\n            panTimer = setTimeout(function() {\n                pan(domNode, speed, direction);\n            }, 50);\n        }\n    }\n\n    // Define the zoom function for the zoomable tree\n\n    function zoom() {\n        svgGroup.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n    }\n\n\n    // define the zoomListener which calls the zoom function on the \"zoom\" event constrained within the scaleExtents\n    var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on(\"zoom\", zoom);\n\n    function initiateDrag(d, domNode) {\n        draggingNode = d;\n        d3.select(domNode).select('.ghostCircle').attr('pointer-events', 'none');\n        d3.selectAll('.ghostCircle').attr('class', 'ghostCircle show');\n        d3.select(domNode).attr('class', 'node activeDrag');\n\n        svgGroup.selectAll(\"g.node\").sort(function(a, b) { // select the parent and sort the path's\n            if (a.id != draggingNode.id) return 1; // a is not the hovered element, send \"a\" to the back\n            else return -1; // a is the hovered element, bring \"a\" to the front\n        });\n        // if nodes has children, remove the links and nodes\n        if (nodes.length > 1) {\n            // remove link paths\n            links = tree.links(nodes);\n            nodePaths = svgGroup.selectAll(\"path.link\")\n                .data(links, function(d) {\n                    return d.target.id;\n                }).remove();\n            // remove child nodes\n            nodesExit = svgGroup.selectAll(\"g.node\")\n                .data(nodes, function(d) {\n                    return d.id;\n                }).filter(function(d, i) {\n                    if (d.id == draggingNode.id) {\n                        return false;\n                    }\n                    return true;\n                }).remove();\n        }\n\n        // remove parent link\n        parentLink = tree.links(tree.nodes(draggingNode.parent));\n        svgGroup.selectAll('path.link').filter(function(d, i) {\n            if (d.target.id == draggingNode.id) {\n                return true;\n            }\n            return false;\n        }).remove();\n\n        dragStarted = null;\n    }\n\n    // define the baseSvg, attaching a class for styling and the zoomListener\n    var baseSvg = d3.select(\"#tree-container\").append(\"svg\")\n        .attr(\"width\", viewerWidth)\n        .attr(\"height\", viewerHeight)\n        .attr(\"class\", \"overlay\")\n        .call(zoomListener);\n\n\n    // Define the drag listeners for drag/drop behaviour of nodes.\n    dragListener = d3.behavior.drag()\n        .on(\"dragstart\", function(d) {\n            if (d == root) {\n                return;\n            }\n            dragStarted = true;\n            nodes = tree.nodes(d);\n            d3.event.sourceEvent.stopPropagation();\n            // it's important that we suppress the mouseover event on the node being dragged. Otherwise it will absorb the mouseover event and the underlying node will not detect it d3.select(this).attr('pointer-events', 'none');\n        })\n        .on(\"drag\", function(d) {\n            if (d == root) {\n                return;\n            }\n            if (dragStarted) {\n                domNode = this;\n                initiateDrag(d, domNode);\n            }\n\n            // get coords of mouseEvent relative to svg container to allow for panning\n            relCoords = d3.mouse($('svg').get(0));\n            if (relCoords[0] < panBoundary) {\n                panTimer = true;\n                pan(this, 'left');\n            } else if (relCoords[0] > ($('svg').width() - panBoundary)) {\n\n                panTimer = true;\n                pan(this, 'right');\n            } else if (relCoords[1] < panBoundary) {\n                panTimer = true;\n                pan(this, 'up');\n            } else if (relCoords[1] > ($('svg').height() - panBoundary)) {\n                panTimer = true;\n                pan(this, 'down');\n            } else {\n                try {\n                    clearTimeout(panTimer);\n                } catch (e) {\n\n                }\n            }\n\n            d.x0 += d3.event.dy;\n            d.y0 += d3.event.dx;\n            var node = d3.select(this);\n            node.attr(\"transform\", \"translate(\" + d.y0 + \",\" + d.x0 + \")\");\n            updateTempConnector();\n        }).on(\"dragend\", function(d) {\n            if (d == root) {\n                return;\n            }\n            domNode = this;\n            if (selectedNode) {\n                // now remove the element from the parent, and insert it into the new elements children\n                var index = draggingNode.parent.children.indexOf(draggingNode);\n                if (index > -1) {\n                    draggingNode.parent.children.splice(index, 1);\n                }\n                if (typeof selectedNode.children !== 'undefined' || typeof selectedNode._children !== 'undefined') {\n                    if (typeof selectedNode.children !== 'undefined') {\n                        selectedNode.children.push(draggingNode);\n                    } else {\n                        selectedNode._children.push(draggingNode);\n                    }\n                } else {\n                    selectedNode.children = [];\n                    selectedNode.children.push(draggingNode);\n                }\n                // Make sure that the node being added to is expanded so user can see added node is correctly moved\n                expand(selectedNode);\n                sortTree();\n                endDrag();\n            } else {\n                endDrag();\n            }\n        });\n\n    function endDrag() {\n        selectedNode = null;\n        d3.selectAll('.ghostCircle').attr('class', 'ghostCircle');\n        d3.select(domNode).attr('class', 'node');\n        // now restore the mouseover event or we won't be able to drag a 2nd time\n        d3.select(domNode).select('.ghostCircle').attr('pointer-events', '');\n        updateTempConnector();\n        if (draggingNode !== null) {\n            update(root);\n            centerNode(draggingNode);\n            draggingNode = null;\n        }\n    }\n\n    // Helper functions for collapsing and expanding nodes.\n\n    function collapse(d) {\n        if (d.children) {\n            d._children = d.children;\n            d._children.forEach(collapse);\n            d.children = null;\n        }\n    }\n\n    function expand(d) {\n        if (d._children) {\n            d.children = d._children;\n            d.children.forEach(expand);\n            d._children = null;\n        }\n    }\n\n    var overCircle = function(d) {\n        selectedNode = d;\n        updateTempConnector();\n    };\n    var outCircle = function(d) {\n        selectedNode = null;\n        updateTempConnector();\n    };\n\n    // Function to update the temporary connector indicating dragging affiliation\n    var updateTempConnector = function() {\n        var data = [];\n        if (draggingNode !== null && selectedNode !== null) {\n            // have to flip the source coordinates since we did this for the existing connectors on the original tree\n            data = [{\n                source: {\n                    x: selectedNode.y0,\n                    y: selectedNode.x0\n                },\n                target: {\n                    x: draggingNode.y0,\n                    y: draggingNode.x0\n                }\n            }];\n        }\n        var link = svgGroup.selectAll(\".templink\").data(data);\n\n        link.enter().append(\"path\")\n            .attr(\"class\", \"templink\")\n            .attr(\"d\", d3.svg.diagonal())\n            .attr('pointer-events', 'none');\n\n        link.attr(\"d\", d3.svg.diagonal());\n\n        link.exit().remove();\n    };\n\n    // Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.\n\n    function centerNode(source) {\n        scale = zoomListener.scale();\n        x = -source.y0;\n        y = -source.x0;\n        x = x * scale + viewerWidth / 2;\n        y = y * scale + viewerHeight / 2;\n        d3.select('g').transition()\n            .duration(duration)\n            .attr(\"transform\", \"translate(\" + x + \",\" + y + \")scale(\" + scale + \")\");\n        zoomListener.scale(scale);\n        zoomListener.translate([x, y]);\n    }\n\n    // Toggle children function\n\n    function toggleChildren(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else if (d._children) {\n            d.children = d._children;\n            d._children = null;\n        }\n        return d;\n    }\n\n    // Toggle children on click.\n\n    function click(d) {\n        if (d3.event.defaultPrevented) return; // click suppressed\n        d = toggleChildren(d);\n        update(d);\n        centerNode(d);\n    }\n\n    function update(source) {\n        // Compute the new height, function counts total children of root node and sets tree height accordingly.\n        // This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed\n        // This makes the layout more consistent.\n        var levelWidth = [1];\n        var childCount = function(level, n) {\n\n            if (n.children && n.children.length > 0) {\n                if (levelWidth.length <= level + 1) levelWidth.push(0);\n\n                levelWidth[level + 1] += n.children.length;\n                n.children.forEach(function(d) {\n                    childCount(level + 1, d);\n                });\n            }\n        };\n        childCount(0, root);\n        var newHeight = d3.max(levelWidth) * 25; // 25 pixels per line  \n        tree = tree.size([newHeight, viewerWidth]);\n\n        // Compute the new tree layout.\n        var nodes = tree.nodes(root).reverse(),\n            links = tree.links(nodes);\n\n        // Set widths between levels based on maxLabelLength.\n        nodes.forEach(function(d) {\n            d.y = (d.depth * (maxLabelLength * 10)); //maxLabelLength * 10px\n            // alternatively to keep a fixed scale one can set a fixed depth per level\n            // Normalize for fixed-depth by commenting out below line\n            // d.y = (d.depth * 500); //500px per level.\n        });\n\n        // Update the nodes…\n        node = svgGroup.selectAll(\"g.node\")\n            .data(nodes, function(d) {\n                return d.id || (d.id = ++i);\n            });\n\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"g\")\n            .call(dragListener)\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n            })\n            .on('click', click);\n\n        nodeEnter.append(\"circle\")\n            .attr('class', 'nodeCircle')\n            .attr(\"r\", 0)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter.append(\"text\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"dy\", \".35em\")\n            .attr('class', 'nodeText')\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            })\n            .style(\"fill-opacity\", 0);\n\n        // phantom node to give us mouseover in a radius around it\n        nodeEnter.append(\"circle\")\n            .attr('class', 'ghostCircle')\n            .attr(\"r\", 30)\n            .attr(\"opacity\", 0.2) // change this to zero to hide the target area\n        .style(\"fill\", \"red\")\n            .attr('pointer-events', 'mouseover')\n            .on(\"mouseover\", function(node) {\n                overCircle(node);\n            })\n            .on(\"mouseout\", function(node) {\n                outCircle(node);\n            });\n\n        // Update the text to reflect whether node has children or not.\n        node.select('text')\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            });\n\n        // Change the circle fill depending on whether it has children and is collapsed\n        node.select(\"circle.nodeCircle\")\n            .attr(\"r\", 4.5)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            });\n\n        // Fade the text in\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1);\n\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\n            })\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 0);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 0);\n\n        // Update the links…\n        var link = svgGroup.selectAll(\"path.link\")\n            .data(links, function(d) {\n                return d.target.id;\n            });\n\n        // Enter any new links at the parent's previous position.\n        link.enter().insert(\"path\", \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                var o = {\n                    x: source.x0,\n                    y: source.y0\n                };\n                return diagonal({\n                    source: o,\n                    target: o\n                });\n            });\n\n        // Transition links to their new position.\n        link.transition()\n            .duration(duration)\n            .attr(\"d\", diagonal);\n\n        // Transition exiting nodes to the parent's new position.\n        link.exit().transition()\n            .duration(duration)\n            .attr(\"d\", function(d) {\n                var o = {\n                    x: source.x,\n                    y: source.y\n                };\n                return diagonal({\n                    source: o,\n                    target: o\n                });\n            })\n            .remove();\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    // Append a group which holds all nodes and which the zoom Listener can act upon.\n    var svgGroup = baseSvg.append(\"g\");\n\n    // Define the root\n    root = treeData;\n    root.x0 = viewerHeight / 2;\n    root.y0 = 0;\n\n    // Layout the tree initially and center on the root node.\n    update(root);\n    centerNode(root);\n});",
			"settings":
			{
				"buffer_size": 19526,
				"line_ending": "Windows",
				"name": "/*Copyright (c) 2013-2016, Rob Schmuecker"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "Package Control: in",
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			]
		],
		"width": 560.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/familia/Documents/GitHub/entidaes",
		"/C/Users/familia/Documents/GitHub/entidaes/js"
	],
	"file_history":
	[
		"/C/Users/jim_a/Documents/GitHub/entidaes/js/functions.js",
		"/C/Users/jim_a/Documents/GitHub/entidaes/PHP/conexion.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/PHP/ramas.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/PHP/ramas - copia.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/index.html",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/cuenta_cdmon",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/index.html",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/js/script.js",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/query.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Tipodoc.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Suborden.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Orden.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Nivel.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Departamento.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Municipio.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Caracter.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/Rama.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/Clases/entidad.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/PHP/Entidad.php",
		"/C/Users/jim_a/Downloads/estilos.css",
		"/C/Users/jim_a/Downloads/SVG.html",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/entidad.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/PHP/rama.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/ord.php",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/php/server.php",
		"/C/Users/jim_a/Desktop/SVG.html",
		"/C/Users/jim_a/Documents/GitHub/entidaes/Administrador entidades/municipio.html",
		"/C/Users/jim_a/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/Users/jim_a/Desktop/Recetario/App/principal.html",
		"/C/Users/jim_a/Desktop/Recetario/servidor/Usuarios.php",
		"/C/Users/jim_a/Desktop/Recetario/servidor/query.php",
		"/C/Users/jim_a/Desktop/Recetario/App/js/app.js",
		"/C/Users/jim_a/Desktop/Recetario/App/index.html",
		"/C/Users/jim_a/Desktop/Portafolio/JSON/trabajos.json",
		"/C/Users/jim_a/Desktop/Portafolio/sim.html",
		"/C/Users/jim_a/Desktop/Portafolio/js/info.js",
		"/C/Users/jim_a/Desktop/Portafolio/css/styles.css",
		"/C/Users/jim_a/Desktop/Portafolio/cd/Busquedas/js/Cola.js",
		"/C/Users/jim_a/Desktop/Portafolio/inter.html",
		"/C/Users/jim_a/Desktop/Portafolio/ia.html",
		"/C/Users/jim_a/Desktop/Portafolio/games.html",
		"/C/Users/jim_a/Desktop/Portafolio/apps.html",
		"/C/Users/jim_a/Desktop/Portafolio/info.html",
		"/C/Users/jim_a/Desktop/Portafolio/index.html",
		"/C/Users/jim_a/Desktop/Portafolio/cd/Busquedas/js/BusquedasMapa.js",
		"/C/xampp/htdocs/Administrador entidades/rama.html",
		"/C/xampp/htdocs/Administrador entidades/orden.html",
		"/C/xampp/htdocs/Administrador entidades/nivel.html",
		"/C/xampp/htdocs/Administrador entidades/municipio.html",
		"/C/xampp/htdocs/Administrador entidades/departamentos.html",
		"/C/xampp/htdocs/Administrador entidades/caracter.html",
		"/C/xampp/htdocs/Recetario/._Usuarios.php",
		"/C/Users/jim_a/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/perros.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/gatos.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/index.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/perros (4).html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/js/1.js",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/gatos (4).html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/paseame.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/registro.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/8.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/9.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/blog.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/conocenos mejor.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/conocenos mejor (2).html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/conocenos mejor (3).html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/datos erroneos.html",
		"/C/Users/jim_a/Desktop/jimmy/Entrega-pagina/datos validos.html",
		"/C/Users/jim_a/Desktop/Rumania A estrella/js/Cola.txt",
		"/C/Users/jim_a/Desktop/Rumania A estrella/js/BusquedasMapa.txt",
		"/C/xampp/htdocs/Varitas/index.html",
		"/C/Users/jim_a/Desktop/Varitas/index.html",
		"/C/Users/jim_a/Desktop/NO SEA SAPO/jquery/jquery-1.11.1.min.js",
		"/C/Users/jim_a/Desktop/NO SEA SAPO/config.xml",
		"/C/Users/jim_a/Desktop/NO SEA SAPO/index.html",
		"/C/Users/jim_a/Desktop/NO SEA SAPO/themes/recetarioTheme.min.css",
		"/C/Users/jim_a/Desktop/Varitas/Varitas Harry Potter.js",
		"/C/Users/jim_a/Desktop/NO SEA SAPO/themes/recetarioTheme.css",
		"/C/Users/jim_a/Desktop/Varitas/Varitas Harry Potter.html",
		"/C/Users/jim_a/Desktop/ing multimedia/Proyecto semillero/NFC/main/ArduinoLibraries-master/NFC/PN532.h",
		"/C/xampp/htdocs/Proyectos_Pruebas/DB.php",
		"/C/xampp/htdocs/Proyectos_Pruebas/insert.php",
		"/C/xampp/htdocs/Proyectos_Pruebas/Archivos en local/archivos.php",
		"/C/Users/jim_a/Desktop/d3mmjwi9zSVpra9i.gif",
		"/C/Users/jim_a/Desktop/d3mmjwi9zSVpra9i.gif.txt",
		"/C/Users/jim_a/Desktop/Wumpus/wumpus.html",
		"/C/Users/jim_a/Desktop/ing multimedia 8/IA/Busqueda/IAUMNG-master/js/BusquedasPuzzle.js",
		"/C/Users/jim_a/Desktop/ProyectoD/Restaurante/www/index.html",
		"/C/Users/jim_a/Desktop/ProyectoD/Restaurante/www/js/index.css",
		"/C/Users/jim_a/Desktop/ProyectoD/Restaurante/www/js/index.js",
		"/C/Users/jim_a/Desktop/ProyectoD/Restaurante/www/index2.html"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"toggleChildren",
			"dia",
			"entidades",
			"trig",
			"2",
			"zoomTransform",
			"\");\n",
			"console",
			"milis",
			"center",
			"cen",
			"centr",
			"tree",
			"tree+",
			"tree",
			"center",
			"y0",
			"center",
			"y0",
			"svgG",
			"vis.",
			"vis",
			"svgGroup",
			"vis",
			"vis =",
			"vis=",
			"vis",
			"dia",
			"diagonal",
			"limite",
			"init",
			";\n",
			"totalNodes",
			"link",
			"centerNode",
			"expand",
			"source",
			"diagonal",
			"svgGro",
			"pan",
			"svgg",
			"arbol",
			"zoomListener",
			"zoom",
			"translate(",
			"transla(",
			"transla",
			"click",
			"links",
			"$",
			"_ent",
			"?",
			"?,",
			"_ent,",
			"?",
			"prof",
			"profundidad",
			"entidad",
			"class=\"nodeCircle\" ",
			"\"node\"",
			"node",
			"<path",
			"path",
			"class=\"link\" ",
			"<circle class=\"ghostCircle\"",
			".00000000000006",
			" class=\"node\"",
			"class=\"link\" ",
			"\"></",
			"});\n",
			"}\n",
			"<select name=\"subord_ent\" id=\"ord_ent\">\n\t\t</select>",
			"<option value=\"-1\">",
			"<option value=-1>",
			"option",
			"misRe",
			"abrir",
			"class=\"rec",
			"\t\t\t\t",
			"class=\"rece",
			"crear",
			"<a href=\"https://www.linkedin",
			"<a",
			"pagecon",
			"){\n",
			"selection",
			"selections",
			"multip",
			"sel",
			"ocur",
			"ocu",
			"todo",
			".der",
			"flec",
			"todo",
			"int2",
			"proce",
			"todo",
			".der",
			"todo",
			"ico",
			"video",
			"ico",
			"enun",
			"hist",
			"his",
			"txt",
			"ref",
			"ref2",
			"ref",
			"ref2",
			"ref",
			"ref2",
			"ref",
			"ref{",
			"ref",
			"ref ",
			"ref",
			"txt",
			"int",
			"max",
			"int",
			"}\n",
			"int",
			"\t\t\t   \n",
			">\n",
			"\t    \t\t\n",
			"izq"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"<a target=\"_blank\" href=\"https://www.linkedin",
			"<a target=\"_blank\"",
			"images(2).jpg",
			"screen",
			"blog.html",
			"conocenos mejor.html",
			"perros.html",
			"gatos.html",
			"index.html"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 626,
						"regions":
						{
						},
						"selection":
						[
							[
								626,
								626
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "js/functions.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18190,
						"regions":
						{
						},
						"selection":
						[
							[
								10216,
								10216
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5660.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19526,
						"regions":
						{
						},
						"selection":
						[
							[
								2783,
								2786
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 855.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84,
						"regions":
						{
						},
						"selection":
						[
							[
								84,
								84
							]
						],
						"settings":
						{
							"auto_name": "which in this case is to identify which items are",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19526,
						"regions":
						{
						},
						"selection":
						[
							[
								13176,
								13190
							]
						],
						"settings":
						{
							"auto_name": "/*Copyright (c) 2013-2016, Rob Schmuecker",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7485.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Entidades.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 437.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
